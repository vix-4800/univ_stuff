#include <iostream>
#include <string>
#include <vector>
#include <sstream>

/////////////////////////////////////////////////////////////////
//           Вычислить значение выражения вида:                //
//      nn+mm-zz...+kk, где nn, mm... - целые числа.           //
//           Порядок знаков '+' и '-' произволен               //
/////////////////////////////////////////////////////////////////

using std::string;
using std::vector;

// функция подсчёта результата
int calc(string s){
    /*
    эту строку можно рассмотреть как набор чисел - положительных и отрицательных, т.е. 5-9 - это два числа: 5 и -9, которые складываются после
    функция проходит по исходной строке два раза.
    первый раз к переменной res (будет хранить итоговый результат) прибавляются все положительные числа
    второй раз из переменной res вычитаются все отрицательные числа
    */
    int res = 0; // переменная для хранения результата
    std::istringstream sstr_1(s); // stringstream для первого прохода по строке
    std::istringstream sstr_2(s); // stringstream для второго прохода
    string tmp_1; // временная переменная (будет хранить текущее число, которое будет прибавляться/вычитаться к/из переменной res)

    // первый проход (прибавляются все числа со знаком '+')
    // с помощью getline делю строку на подстроки. разделитель - '+'. подстроки перевожу в int и прибавляю к res
    while (std::getline(sstr_1, tmp_1, '+'))
        res += stoi(tmp_1);

    // во время второго прохода вычтется самое первое число в строке вне зависимости от того, положительное оно или отрицательное
    string extra; // в эту переменную позже запишу это число, чтобы потом прибавить

    if (s.at(0) == '-') // если первое число в строке отрицательное, удаляю этот минус для "упрощения себе жизни"
    { 
        s.at(0) = ' ';

        int k = 0; // счётчик (так как минус я удалил, первый элемент равен "ничему",
        // а значит в цикле while вычитание чисел начну со второго найденного, иначе получу исключение std::invalid_argument при вызове stoi)

        // второй проход (вычитаются все числа со знаком '-')
        // использую getline снова. разделитель - знак минус.
        while (std::getline(sstr_2, tmp_1, '-')){
            if(k!=0)
                res -= stoi(tmp_1);
            else
                k++;
        }

        // нахожу вычтенное число (substr от 1-ого элемента строки (т.к нулевой элемент я удалил, там был первый минус) до первого найденного знака минус) и прибавляю его
        // прибавится в любом случае только первое найденное число, даже если до первого минуса будет несколько чисел, разделённых знаком плюс,
        // так как stoi переведёт в int только первое найденное в моей подстроке число, а не всю подстроку)
        extra = s.substr(1, s.find('-'));
        res += stoi(extra);
    }
    else // если же первое число в строке положительное, сразу начинаю вычитание отрицательных чисел
    {
        // второй проход (вычитаются все числа со знаком '-')
        // использую getline снова. разделитель - знак минус.
        while (std::getline(sstr_2, tmp_1, '-'))
            res -= stoi(tmp_1);
        
        // нахожу вычтенное число (substr от 0-ого элемента строки до первого найденного знака минус) и прибавляю его
        // прибавится в любом случае только первое найденное число, даже если до первого минуса будет несколько чисел, разделённых знаком плюс,
        // так как stoi переведёт в int только первое найденное в моей подстроке число, а не всю подстроку)
        extra = s.substr(0, s.find('-'));
        res += stoi(extra);
    }
    
    return res;
}

int main(){
    string expression = "135+123+4-5+6-7+8+9-1-23456+7-8+689-98-4613+58456-724+9245-6950-2-13674-245+7137+429-8-4292-581+824-82+8-738"; // исходное выражение
    int result = calc(expression); // вызов функции подсчета результата
    std::cout << result << std::endl;

    /* 
    // для проверки результата
    int right_answer = 21596; // expected output
    std::cout << std::boolalpha << (right_answer == result) << std::endl;
    */

    return EXIT_SUCCESS;
}